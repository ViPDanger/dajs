package db

import (
	"DAJ/Internal/domain/entity"
	"errors"
)

func (charUC *GlossaryUseCase) New(Glossary entity.Glossary) error {
	if _, exists := glossarys[Glossary.ID]; exists {
		return errors.New("Персонаж с таким ID уже существует")
	}
	glossarys[Glossary.ID] = Glossary
	return nil
}
func (charUC *GlossaryUseCase) Set(Glossary entity.Glossary) error {
	if _, exists := glossarys[Glossary.ID]; !exists {
		return errors.New("Персонаж с таким ID не существует")
	}
	glossarys[Glossary.ID] = Glossary
	return nil
}
func (charUC *GlossaryUseCase) Get(id string) (Glossary entity.Glossary, err error) {
	var exists bool
	if Glossary, exists = glossarys[id]; !exists {
		err = errors.New("Персонаж с таким ID не существует")
	}
	return
}
func (charUC *GlossaryUseCase) GetAll() (m []entity.Glossary, err error) {
	for i := range glossarys {
		m = append(m, glossarys[i])
	}
	return
}
func (charUC *GlossaryUseCase) Delete(id string) (err error) {
	if _, exists := glossarys[id]; !exists {
		err = errors.New("Персонаж с таким ID не существует")
	}
	delete(glossarys, id)
	return nil
}
