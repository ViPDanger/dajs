from aiogram import  types, Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from client import Authorizator
from options import BASE_URL
from .str import start_str,character_menu_str,help_str
import asyncio

router = Router()
user_data: dict[int,Authorizator] = {}

@router.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    authorizator = user_data.get(user_id)
    if authorizator:
        authorizator.GetAccessToken()
    else:
        authorizator = Authorizator(BASE_URL,str(user_id),str(user_id))
        user_data[user_id] = authorizator
        authorizator.GetAccessToken()

    start_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=character_menu_str)],
        [KeyboardButton(text=help_str)]
    ],
    resize_keyboard=True
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç!", reply_markup=start_kb)

@router.message(lambda msg: msg.text == start_str)
async def return_handler(message: types.Message):
    await start_handler(message)

# ? –≤–æ–ø—Ä–æ—Å–∏–∫–∏
@router.message(lambda msg: msg.text == help_str)
async def help_handler(message: types.Message):
    help_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=start_str)],
    ],
    resize_keyboard=True
    )
    await message.answer("–í–æ–æ–±—â–µ–º —Ç–æ, —è —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏, –∞ —Ç–∞–∫ –∂–µ –∏–º–µ—Ç—å –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–ø–∏—Å–∞–Ω–∏—è–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –∏ –ø—Ä–æ—á–µ–º—É. –í–æ—Ç —Ç–∞–∫–æ–π —è –∫—Ä—É—Ç–æ–π, –¥–∞", reply_markup=help_kb)

#@router.message()
#async def fallback_handler(message: types.Message):
#    await message.answer("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü§ñ. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ /start.")